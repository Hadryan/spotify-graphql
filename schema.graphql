type Album {
  """
  The type of the album: one of `"album"`, `"single"`, or `"compilation"`.
  """
  album_type: String!

  """
  The artists of the album. Each artist object includes a link in `href` to more detailed information about the artist.
  """
  artists: [SimplifiedArtist!]!

  """
  The markets in which the album is available: [ISO 3166-1 alpha-2 country codes](http://en.wikipedia.org/wiki/ISO_3166-1_alpha-2). Note that an album is considered available in a market when at least 1 of its tracks is available in that market.
  """
  available_markets: [String!]!

  """
  The copyright statements of the album.
  """
  copyrights: [Copyright!]!

  """
  Known external IDs for the album.
  """
  external_ids: [ExternalId!]!

  """
  Known external URLs for this album.
  """
  external_urls: [ExternalUrl!]!

  """
  A list of the genres used to classify the album. For example: `"Prog Rock"`, `"Post-Grunge"`. (If not yet classified, the array is empty.)
  """
  genres: [String!]!

  """
  A link to the Web API endpoint providing full details of the album.
  """
  href: String!

  """
  The [Spotify ID](https://developer.spotify.com/documentation/web-api/#spotify-uris-and-ids) for the album.
  """
  id: String!

  """
  The cover art for the album in various sizes, widest first.
  """
  images: [Image!]!

  """
  The label for the album.
  """
  label: String!

  """
  The name of the album. In case of an album takedown, the value may be an empty string.
  """
  name: String!

  """
  The popularity of the album. The value will be between 0 and 100, with 100 being the most popular. The popularity is calculated from the popularity of the album’s individual tracks.
  """
  popularity: Int!

  """
  The date the album was first released, for example `1981`. Depending on the precision, it might be shown as `1981-12` or `1981-12-15`.
  """
  release_date: String!

  """
  The precision with which `release_date` value is known: `year`, `month`, or `day`.
  """
  release_date_precision: String!

  """
  Part of the response when [Track Relinking](https://developer.spotify.com/documentation/general/guides/track-relinking-guide/) is applied, the original track is not available in the given market, and Spotify did not have any tracks to relink it with. The track response will still contain metadata for the original track, and a restrictions object containing the reason why the track is not available: `"restrictions" : {"reason" : "market"}`
  """
  restrictions: Restrictions

  """
  The tracks of the album.
  """
  tracks(
    """
    The maximum number of tracks to return. Default: 20. Minimum: 1. Maximum: 50.
    """
    limit: Int = 20,

    """
    The index of the first track to return. Default: 0 (the first object). Use with limit to get the next set of tracks.
    """
    offset: Int = 0,

    """
    An [ISO 3166-1 alpha-2 country code](http://en.wikipedia.org/wiki/ISO_3166-1_alpha-2) or the string `from_token`. Provide this parameter if you want to apply [Track Relinking](https://developer.spotify.com/documentation/general/guides/track-relinking-guide/).
    """
    market: String,
  ): SimplifiedTrackEdge!

  """
  The object type: “album”
  """
  type: String!

  """
  The [Spotify URI](https://developer.spotify.com/documentation/web-api/#spotify-uris-and-ids) for the album.
  """
  uri: String!
}

type SimplifiedAlbum {
  """
  The field is present when getting an artist’s albums. Possible values are “album”, “single”, “compilation”, “appears_on”. Compare to album_type this field represents relationship between the artist and the album.
  """
  album_group: String

  """
  The type of the album: one of “album”, “single”, or “compilation”.
  """
  album_type: String!

  """
  The artists of the album. Each artist object includes a link in `href` to more detailed information about the artist.
  """
  artists: [SimplifiedArtist!]!

  """
  The markets in which the album is available: [ISO 3166-1 alpha-2 country codes](http://en.wikipedia.org/wiki/ISO_3166-1_alpha-2). Note that an album is considered available in a market when at least 1 of its tracks is available in that market.
  """
  available_markets: [String!]!

  """
  Known external URLs for this album.
  """
  external_urls: [ExternalUrl!]!

  """
  A link to the Web API endpoint providing full details of the album.
  """
  href: String!

  """
  The [/documentation/web-api/#spotify-uris-and-ids) for the album.
  """
  id: String!

  """
  The cover art for the album in various sizes, widest first.
  """
  images: [Image!]!

  """
  The name of the album. In case of an album takedown, the value may be an empty string.
  """
  name: String!

  """
  The date the album was first released, for example `1981`. Depending on the precision, it might be shown as `1981-12` or `1981-12-15`.
  """
  release_date: String!

  """
  The precision with which `release_date` value is known: `year`, `month`, or `day`.
  """
  release_date_precision: String!

  """
  Part of the response when [Track Relinking](https://developer.spotify.com/documentation/general/guides/track-relinking-guide/) is applied, the original track is not available in the given market, and Spotify did not have any tracks to relink it with. The track response will still contain metadata for the original track, and a restrictions object containing the reason why the track is not available: `"restrictions" : {"reason" : "market"}`
  """
  restrictions: Restrictions

  """
  The object type: “album”
  """
  type: String!

  """
  The [Spotify URI](https://developer.spotify.com/documentation/web-api/#spotify-uris-and-ids) for the album.
  """
  uri: String!
}

type Artist {
  """
  Known external URLs for this artist.
  """
  external_urls: [ExternalUrl!]!

  """
  Information about the followers of the artist.
  """
  followers: Followers!

  """
  A list of the genres the artist is associated with. For example: `"Prog Rock"`, `"Post-Grunge"`. (If not yet classified, the array is empty.)
  """
  genres: [String!]!

  """
  A link to the Web API endpoint providing full details of the artist.
  """
  href: String!

  """
  The [Spotify ID](https://developer.spotify.com/documentation/web-api/#spotify-uris-and-ids) for the artist.
  """
  id: String!

  """
  Images of the artist in various sizes, widest first.
  """
  images: [Image!]!

  """
  The name of the artist
  """
  name: String!

  """
  The popularity of the artist. The value will be between 0 and 100, with 100 being the most popular. The artist’s popularity is calculated from the popularity of all the artist’s tracks.
  """
  popularity: Int!

  """
  The object type: `"artist"`
  """
  type: String!

  """
  The [Spotify URI](https://developer.spotify.com/documentation/web-api/#spotify-uris-and-ids) for the artist.
  """
  uri: String!

  """
  The catalog information about this artist’s albums.
  """
  albums(
    """
    A comma-separated list of keywords that will be used to filter the response. If not supplied, all album types will be returned. Valid values are: `album`, `single`, `appears_on`, `compilation`. For example: `include_groups=album,single`.
    """
    include_groups: [String!],

    """
    An [ISO 3166-1 alpha-2 country code](http://en.wikipedia.org/wiki/ISO_3166-1_alpha-2) or the string `from_token`. Supply this parameter to limit the response to one particular geographical market. For example, for albums available in Sweden: `market=SE`. *If not given, results will be returned for all markets and you are likely to get duplicate results per album, one for each market in which the album is available!*
    """
    country: String,

    """
    The number of album objects to return. Default: 20. Minimum: 1. Maximum: 50. For example: `limit=2`.
    """
    limit: Int = 20,

    """
    The index of the first album to return. Default: 0 (i.e., the first album). Use with `limit` to get the next set of albums.
    """
    offset: Int = 0,
  ): SimplifiedAlbumEdge!

  """
  The Spotify catalog information about this artist’s top tracks by country.
  """
  top_tracks(
    """
    An [ISO 3166-1 alpha-2 country code](http://en.wikipedia.org/wiki/ISO_3166-1_alpha-2) or the string `from_token`.
    """
    country: String!,
  ): [Track!]!

  """
  The Spotify catalog information about artists similar to this artist. Similarity is based on analysis of the Spotify community’s listening history.
  """
  related_artists: [Artist!]!
}

type SimplifiedArtist {
  """
  Known external URLs for this artist.
  """
  external_urls: [ExternalUrl!]!

  """
  A link to the Web API endpoint providing full details of the artist.
  """
  href: String!

  """
  The [Spotify ID](https://developer.spotify.com/documentation/web-api/#spotify-uris-and-ids) for the artist.
  """
  id: String!

  """
  The name of the artist
  """
  name: String!

  """
  The object type: `"artist"`
  """
  type: String!

  """
  The [Spotify URI](https://developer.spotify.com/documentation/web-api/#spotify-uris-and-ids) for the artist.
  """
  uri: String!
}

type AudioFeatures {
  """
  A confidence measure from 0.0 to 1.0 of whether the track is acoustic. 1.0 represents high confidence the track is acoustic.
  """
  acousticness: Float!

  """
  An HTTP URL to access the full audio analysis of this track. An access token is required to access this data.
  """
  analysis_url: String!

  """
  Danceability describes how suitable a track is for dancing based on a combination of musical elements including tempo, rhythm stability, beat strength, and overall regularity. A value of 0.0 is least danceable and 1.0 is most danceable.
  """
  danceability: Float!

  """
  The duration of the track in milliseconds.
  """
  duration_ms: Int!

  """
  Energy is a measure from 0.0 to 1.0 and represents a perceptual measure of intensity and activity. Typically, energetic tracks feel fast, loud, and noisy. For example, death metal has high energy, while a Bach prelude scores low on the scale. Perceptual features contributing to this attribute include dynamic range, perceived loudness, timbre, onset rate, and general entropy.
  """
  energy: Float!

  """
  The Spotify ID for the track.
  """
  id: String!

  """
  Predicts whether a track contains no vocals. “Ooh” and “aah” sounds are treated as instrumental in this context. Rap or spoken word tracks are clearly “vocal”. The closer the instrumentalness value is to 1.0, the greater likelihood the track contains no vocal content. Values above 0.5 are intended to represent instrumental tracks, but confidence is higher as the value approaches 1.0.
  """
  instrumentalness: Float!

  """
  The key the track is in. Integers map to pitches using standard [Pitch Class notation](https://en.wikipedia.org/wiki/Pitch_class). E.g. 0 = C, 1 = C♯/D♭, 2 = D, and so on.
  """
  key: Int!

  """
  Detects the presence of an audience in the recording. Higher liveness values represent an increased probability that the track was performed live. A value above 0.8 provides strong likelihood that the track is live.
  """
  liveness: Float!

  """
  The overall loudness of a track in decibels (dB). Loudness values are averaged across the entire track and are useful for comparing relative loudness of tracks. Loudness is the quality of a sound that is the primary psychological correlate of physical strength (amplitude). Values typical range between -60 and 0 db.
  """
  loudness: Float!

  """
  Mode indicates the modality (major or minor) of a track, the type of scale from which its melodic content is derived. Major is represented by 1 and minor is 0.
  """
  mode: Int!

  """
  Speechiness detects the presence of spoken words in a track. The more exclusively speech-like the recording (e.g. talk show, audio book, poetry), the closer to 1.0 the attribute value. Values above 0.66 describe tracks that are probably made entirely of spoken words. Values between 0.33 and 0.66 describe tracks that may contain both music and speech, either in sections or layered, including such cases as rap music. Values below 0.33 most likely represent music and other non-speech-like tracks.
  """
  speechiness: Float!

  """
  The overall estimated tempo of a track in beats per minute (BPM). In musical terminology, tempo is the speed or pace of a given piece and derives directly from the average beat duration.
  """
  tempo: Float!

  """
  An estimated overall time signature of a track. The time signature (meter) is a notational convention to specify how many beats are in each bar (or measure).
  """
  time_signature: Int!

  """
  A link to the Web API endpoint providing full details of the track.
  """
  track_href: String!

  """
  The object type: “audio_features”.
  """
  type: String!

  """
  The Spotify URI for the track.
  """
  uri: String!

  """
  A measure from 0.0 to 1.0 describing the musical positiveness conveyed by a track. Tracks with high valence sound more positive (e.g. happy, cheerful, euphoric), while tracks with low valence sound more negative (e.g. sad, depressed, angry).
  """
  valence: Float!
}

type Category {
  """
  A link to the Web API endpoint returning full details of the category.
  """
  href: String!

  """
  The category icon, in various sizes.
  """
  icons: [Image!]!

  """
  The [Spotify category ID](https://developer.spotify.com/documentation/web-api/#spotify-uris-and-ids) of the category.
  """
  id: String!

  """
  The name of the category.
  """
  name: String!

  """
  The list of Spotify playlists tagged with this particular category.
  """
  playlists(
    """
    A country: an [ISO 3166-1 alpha-2 country code](http://en.wikipedia.org/wiki/ISO_3166-1_alpha-2).'
    """
    country: String,

    """
    The maximum number of items to return. Default: 20. Minimum: 1. Maximum: 50.
    """
    limit: Int = 20,

    """
    The index of the first item to return. Default: 0 (the first object). Use with `limit` to get the next set of items.
    """
    offset: Int = 0,
  ): SimplifiedPlaylistEdge!
}

type Context {
  """
  The object type, e.g. “artist”, “playlist”, “album”.
  """
  type: String!

  """
  A link to the Web API endpoint providing full details of the track.
  """
  href: String!

  """
  External URLs for this context.
  """
  external_urls: [ExternalUrl!]!

  """
  The [Spotify URI](https://developer.spotify.com/documentation/web-api/#spotify-uris-and-ids) for the context.
  """
  uri: String!
}

type Copyright {
  """
  The copyright text for this album.
  """
  text: String!

  """
  The type of copyright: `C` = the copyright, `P` = the sound recording (performance) copyright.
  """
  type: String!
}

type Cursor {
  """
  The cursor to use as key to find the next page of items.
  """
  after: String!
}

type Error {
  """
  The HTTP status code (also returned in the response header; see [Response Status Codes](https://developer.spotify.com/documentation/web-api/#response-status-codes) for more information).
  """
  status: Int!

  """
  A short description of the cause of the error.
  """
  message: String!
}

type PlayerError {
  """
  The HTTP status code. Either `404 NOT FOUND` or `403 FORBIDDEN`. Also returned in the response header.
  """
  status: Int!

  """
  A short description of the cause of the error.
  """
  message: String!

  """
  One of the predefined [player error reasons](https://developer.spotify.com/documentation/web-api/reference/object-model/#player-error-reasons).
  """
  reason: String!
}

type ExternalId {
  """
  The identifier type, for example: `"isrc"` - [International Standard Recording Code](http://en.wikipedia.org/wiki/International_Standard_Recording_Code), `"ean"` - [International Article Number](http://en.wikipedia.org/wiki/International_Article_Number_%28EAN%29), `"upc"` - [Universal Product Code](http://en.wikipedia.org/wiki/Universal_Product_Code).
  """
  key: String!

  """
  An external identifier for the object.
  """
  value: String!
}

type ExternalUrl {
  """
  The type of the URL, for example: `"spotify"` - The [Spotify URL](https://developer.spotify.com/documentation/web-api/#spotify-uris-and-ids) for the object.
  """
  key: String!

  """
  An external, public URL to the object.
  """
  value: String!
}

type Followers {
  """
  A link to the Web API endpoint providing full details of the followers; `null` if not available. Please note that this will always be set to null, as the Web API does not support it at the moment.
  """
  href: String

  """
  The total number of followers.
  """
  total: Int!
}

type Image {
  """
  The image height in pixels. If unknown: `null` or not returned.
  """
  height: Int

  """
  The source URL of the image.
  """
  url: String!

  """
  The image width in pixels. If unknown: `null` or not returned.
  """
  width: Int
}

type Paging {
  """
  A link to the Web API endpoint returning the full result of the request.
  """
  href: String!

  """
  The maximum number of items in the response (as set in the query or by default).
  """
  limit: Int!

  """
  URL to the next page of items. ( `null` if none)
  """
  next: String

  """
  The offset of the items returned (as set in the query or by default).
  """
  offset: Int!

  """
  URL to the previous page of items. ( `null` if none)
  """
  previous: String

  """
  The maximum number of items available to return.
  """
  total: Int!
}

type CursorPaging {
  """
  A link to the Web API endpoint returning the full result of the request.
  """
  href: String!

  """
  The maximum number of items in the response (as set in the query or by default).
  """
  limit: Int!

  """
  URL to the next page of items. ( `null` if none)
  """
  next: String

  """
  The cursors used to find the next set of items.
  """
  cursors: Cursor!

  """
  The maximum number of items available to return.
  """
  total: Int!
}

type PlayHistory {
  """
  The track the user listened to.
  """
  track: SimplifiedTrack!

  """
  The date and time the track was played.
  """
  played_at: String!

  """
  The context the track was played from.
  """
  context: Context!
}

type Playlist {
  """
  Returns `true` if context is not search and the owner allows other users to modify the playlist. Otherwise returns `false`.
  """
  collaborative: Boolean!

  """
  The playlist description. _Only returned for modified, verified playlists, otherwise_ `null`.
  """
  description: String

  """
  Known external URLs for this playlist.
  """
  external_urls: [ExternalUrl!]!

  """
  Information about the followers of the playlist.
  """
  followers: Followers!

  """
  A link to the Web API endpoint providing full details of the playlist.
  """
  href: String!

  """
  The [Spotify ID](https://developer.spotify.com/documentation/web-api/#spotify-uris-and-ids) for the playlist.
  """
  id: String!

  """
  Images for the playlist. The array may be empty or contain up to three images. The images are returned by size in descending order. See [Working with Playlists](https://developer.spotify.com/documentation/general/guides/working-with-playlists/). _Note: If returned, the source URL for the image (`url` ) is temporary and will expire in less than a day._
  """
  images: [Image!]!

  """
  The name of the playlist.
  """
  name: String!

  """
  The user who owns the playlist
  """
  owner: PublicUser!

  """
  The playlist’s public/private status: `true` the playlist is public, `false` the playlist is private, `null` the playlist status is not relevant. For more about public/private status, see [Working with Playlists](https://developer.spotify.com/documentation/general/guides/working-with-playlists/).
  """
  public: Boolean

  """
  The version identifier for the current playlist. Can be supplied in other requests to target a specific playlist version: see [Remove tracks from a playlist](https://developer.spotify.com/documentation/web-api/reference/playlists/remove-tracks-playlist/)
  """
  snapshot_id: String!

  """
  Information about the tracks of the playlist.
  """
  tracks(
    # TODO(bobbyluig): Use fields optimization.

    """
    The maximum number of tracks to return. Default: 100. Minimum: 1. Maximum: 100.
    """
    limit: Int = 100,

    """
    The index of the first track to return. Default: 0 (the first object).
    """
    offset: Int = 0,

    """
    An [ISO 3166-1 alpha-2 country code](http://en.wikipedia.org/wiki/ISO_3166-1_alpha-2) or the string `from_token`. Provide this parameter if you want to apply [Track Relinking](https://developer.spotify.com/documentation/general/guides/track-relinking-guide/).
    """
    market: String,
  ): PlaylistTrackEdge!

  """
  The object type: “playlist”
  """
  type: String!

  """
  The [Spotify URI](https://developer.spotify.com/documentation/web-api/#spotify-uris-and-ids) for the playlist.
  """
  uri: String!

  """
  Check to see if one or more Spotify users are following this playlist.
  """
  contains_followers(
    """
    A comma-separated list of [Spotify User IDs](https://developer.spotify.com/documentation/web-api/#spotify-uris-and-ids) ; the ids of the users that you want to check to see if they follow the playlist. Maximum: 5 ids.
    """
    ids: [String!]!
  ): [Boolean!]!
}

type SimplifiedPlaylist {
  """
  Returns `true` if context is not search and the owner allows other users to modify the playlist. Otherwise returns `false`.
  """
  collaborative: Boolean!

  """
  Known external URLs for this playlist.
  """
  external_urls: [ExternalUrl!]!

  """
  A link to the Web API endpoint providing full details of the playlist.
  """
  href: String!

  """
  The [Spotify ID](https://developer.spotify.com/documentation/web-api/#spotify-uris-and-ids) for the playlist.
  """
  id: String!

  """
  Images for the playlist. The array may be empty or contain up to three images. The images are returned by size in descending order. See [Working with Playlists](https://developer.spotify.com/documentation/general/guides/working-with-playlists/).
  _Note: If returned, the source URL for the image (`url` ) is temporary and will expire in less than a day._
  """
  images: [Image!]!

  """
  The name of the playlist.
  """
  name: String!

  """
  The user who owns the playlist
  """
  owner: PublicUser!

  """
  The playlist’s public/private status: `true` the playlist is public, `false` the playlist is private, `null` the playlist status is not relevant. For more about public/private status, see [Working with Playlists](https://developer.spotify.com/documentation/general/guides/working-with-playlists/).
  """
  public: Boolean

  """
  The version identifier for the current playlist. Can be supplied in other requests to target a specific playlist version
  """
  snapshot_id: String!

  """
  A collection containing a link (`href`) to the Web API endpoint where full details of the playlist’s tracks can be retrieved, along with the `total` number of tracks in the playlist.
  """
  tracks: PlaylistTracks!

  """
  The object type: “playlist”
  """
  type: String!

  """
  The [Spotify URI](https://developer.spotify.com/documentation/web-api/#spotify-uris-and-ids) for the playlist.
  """
  uri: String!
}

type PlaylistTrack {
  """
  The date and time the track was added.
  _Note that some very old playlists may return`null` in this field._
  """
  added_at: String

  """
  The Spotify user who added the track.
  _Note that some very old playlists may return`null` in this field._
  """
  added_by: PublicUser

  """
  Whether this track is a [local file](https://developer.spotify.com/web-api/local-files-spotify-playlists/) or not.
  """
  is_local: Boolean!

  """
  Information about the track.
  """
  track: Track!
}

type RecommendationsResponse {
  """
  An array of [recommendation seed objects](https://developer.spotify.com/documentation/web-api/reference/object-model/#recommendations-seed-object).
  """
  seeds: [RecommendationsSeed!]!

  """
  An array of [track object (simplified)](https://developer.spotify.com/documentation/web-api/reference/object-model/#track-object-simplified) ordered according to the parameters supplied.
  """
  tracks: [SimplifiedTrack!]!
}

type RecommendationsSeed {
  """
  The number of tracks available after min_* and max_* filters have been applied.
  """
  afterFilteringSize: Int!

  """
  The number of tracks available after relinking for regional availability.
  """
  afterRelinkingSize: Int!

  """
  A link to the full track or artist data for this seed. For tracks this will be a link to a [Track Object](https://developer.spotify.com/documentation/web-api/reference/object-model/#track-object-full). For artists a link to [an Artist Object](https://developer.spotify.com/documentation/web-api/reference/object-model/#artist-object-full). For genre seeds, this value will be `null`.
  """
  href: String

  """
  The id used to select this seed. This will be the same as the string used in the `seed_artists`, `seed_tracks` or `seed_genres` parameter.
  """
  id: String!

  """
  The number of recommended tracks available for this seed.
  """
  initialPoolSize: Int!

  """
  The entity type of this seed. One of `artist`, `track` or `genre`.
  """
  type: String!
}

type SavedTrack {
  """
  The date and time the track was saved.
  """
  added_at: String!

  """
  Information about the track.
  """
  track: Track!
}

type SavedAlbum {
  """
  The date and time the album was saved.
  """
  added_at: String!

  """
  Information about the album.
  """
  album: Album!
}

type Track {
  """
  The album on which the track appears. The album object includes a link in `href` to full information about the album.
  """
  album: SimplifiedAlbum!

  """
  The artists who performed the track. Each artist object includes a link in `href` to more detailed information about the artist.
  """
  artists: [SimplifiedArtist!]!

  """
  A list of the countries in which the track can be played, identified by their [ISO 3166-1 alpha-2](http://en.wikipedia.org/wiki/ISO_3166-1_alpha-2) code.
  """
  available_markets: [String!]!

  """
  The disc number (usually `1` unless the album consists of more than one disc).
  """
  disc_number: Int!

  """
  The track length in milliseconds.
  """
  duration_ms: Int!

  """
  Whether or not the track has explicit lyrics ( `true` = yes it does; `false` = no it does not OR unknown).
  """
  explicit: Boolean!

  """
  Known external IDs for the track.
  """
  external_ids: [ExternalId!]!

  """
  Known external URLs for this track.
  """
  external_urls: [ExternalUrl!]!

  """
  A link to the Web API endpoint providing full details of the track.
  """
  href: String!

  """
  The [Spotify ID](https://developer.spotify.com/documentation/web-api/#spotify-uris-and-ids) for the track.
  """
  id: String!

  """
  Part of the response when [Track Relinking](https://developer.spotify.com/documentation/general/guides/track-relinking-guide/) is applied. If `true`, the track is playable in the given market. Otherwise `false`.
  """
  is_playable: Boolean!

  """
  Part of the response when [Track Relinking](https://developer.spotify.com/documentation/general/guides/track-relinking-guide/) is applied, and the requested track has been replaced with different track. The track in the `linked_from` object contains information about the originally requested track.
  """
  linked_from: TrackLink!

  """
  Part of the response when [Track Relinking](https://developer.spotify.com/documentation/general/guides/track-relinking-guide/) is applied, the original track is not available in the given market, and Spotify did not have any tracks to relink it with. The track response will still contain metadata for the original track, and a restrictions object containing the reason why the track is not available: `"restrictions" : {"reason" : "market"}`
  """
  restrictions: Restrictions

  """
  The name of the track.
  """
  name: String!

  """
  The popularity of the track. The value will be between 0 and 100, with 100 being the most popular.
  The popularity of a track is a value between 0 and 100, with 100 being the most popular. The popularity is calculated by algorithm and is based, in the most part, on the total number of plays the track has had and how recent those plays are.
  Generally speaking, songs that are being played a lot now will have a higher popularity than songs that were played a lot in the past. Duplicate tracks (e.g. the same track from a single and an album) are rated independently. Artist and album popularity is derived mathematically from track popularity. Note that the popularity value may lag actual popularity by a few days: the value is not updated in real time.
  """
  popularity: Int!

  """
  A link to a 30 second preview (MP3 format) of the track. Can be `null`
  """
  preview_url: String

  """
  The number of the track. If an album has several discs, the track number is the number on the specified disc.
  """
  track_number: Int!

  """
  The object type: “track”.
  """
  type: String!

  """
  The [Spotify URI](https://developer.spotify.com/documentation/web-api/#spotify-uris-and-ids) for the track.
  """
  uri: String!

  """
  Whether or not the track is from a local file.
  """
  is_local: Boolean!

  """
  A detailed audio analysis for this track.
  """
  audio_analysis: AudioAnalysis!

  """
  The audio feature information for this track.
  """
  audio_features: AudioFeatures!
}

type SimplifiedTrack {
  """
  The artists who performed the track. Each artist object includes a link in `href` to more detailed information about the artist.
  """
  artists: [Artist!]!

  """
  A list of the countries in which the track can be played, identified by their [ISO 3166-1 alpha-2](http://en.wikipedia.org/wiki/ISO_3166-1_alpha-2) code.
  """
  available_markets: [String!]!

  """
  The disc number (usually `1` unless the album consists of more than one disc).
  """
  disc_number: Int!

  """
  The track length in milliseconds.
  """
  duration_ms: Int!

  """
  Whether or not the track has explicit lyrics ( `true` = yes it does; `false` = no it does not OR unknown).
  """
  explicit: Boolean!

  """
  External URLs for this track.
  """
  external_urls: [ExternalUrl!]!

  """
  A link to the Web API endpoint providing full details of the track.
  """
  href: String!

  """
  The [Spotify ID](https://developer.spotify.com/documentation/web-api/#spotify-uris-and-ids) for the track.
  """
  id: String!

  """
  Part of the response when [Track Relinking](https://developer.spotify.com/documentation/general/guides/track-relinking-guide/) is applied. If `true`, the track is playable in the given market. Otherwise `false`.
  """
  is_playable: Boolean!

  """
  Part of the response when [Track Relinking](https://developer.spotify.com/documentation/general/guides/track-relinking-guide/) is applied and is only part of the response if the track linking, in fact, exists. The requested track has been replaced with a different track. The track in the `linked_from` object contains information about the originally requested track.
  """
  linked_from: Track!

  """
  Part of the response when [Track Relinking](https://developer.spotify.com/documentation/general/guides/track-relinking-guide/) is applied, the original track is not available in the given market, and Spotify did not have any tracks to relink it with. The track response will still contain metadata for the original track, and a restrictions object containing the reason why the track is not available: `"restrictions" : {"reason" : "market"}`
  """
  restrictions: Restrictions

  """
  The name of the track.
  """
  name: String!

  """
  A URL to a 30 second preview (MP3 format) of the track.
  """
  preview_url: String!

  """
  The number of the track. If an album has several discs, the track number is the number on the specified disc.
  """
  track_number: Int!

  """
  The object type: “track”.
  """
  type: String!

  """
  The [Spotify URI](https://developer.spotify.com/documentation/web-api/#spotify-uris-and-ids) for the track.
  """
  uri: String!

  """
  Whether or not the track is from a local file.
  """
  is_local: Boolean!
}

type TrackLink {
  """
  Known external URLs for this track.
  """
  external_urls: [ExternalUrl!]!

  """
  A link to the Web API endpoint providing full details of the track.
  """
  href: String!

  """
  The [Spotify ID](https://developer.spotify.com/documentation/web-api/#spotify-uris-and-ids) for the track.
  """
  id: String!

  """
  The object type: “track”.
  """
  type: String!

  """
  The [Spotify URI](https://developer.spotify.com/documentation/web-api/#spotify-uris-and-ids) for the track.
  """
  uri: String!
}

type PrivateUser {
  """
  The user’s date-of-birth.
  _This field is only available when the current user has granted access to the[user-read-birthdate](https://developer.spotify.com/documentation/general/guides/authorization-guide/#list-of-scopes) scope._
  """
  birthdate: String!

  """
  The country of the user, as set in the user’s account profile. An [ISO 3166-1 alpha-2 country code](http://en.wikipedia.org/wiki/ISO_3166-1_alpha-2). _This field is only available when the current user has granted access to the[user-read-private](https://developer.spotify.com/documentation/general/guides/authorization-guide/#list-of-scopes) scope._
  """
  country: String!

  """
  The name displayed on the user’s profile. `null` if not available.
  """
  display_name: String

  """
  The user’s email address, as entered by the user when creating their account.
  _ **Important!** This email address is unverified; there is no proof that it actually belongs to the user._
  _This field is only available when the current user has granted access to the[user-read-email](https://developer.spotify.com/documentation/general/guides/authorization-guide/#list-of-scopes) scope._
  """
  email: String!

  """
  Known external URLs for this user.
  """
  external_urls: [ExternalUrl!]!

  """
  Information about the followers of the user.
  """
  followers: Followers!

  """
  A link to the Web API endpoint for this user.
  """
  href: String!

  """
  The [Spotify user ID](https://developer.spotify.com/documentation/web-api/#spotify-uris-and-ids) for the user
  """
  id: String!

  """
  The user’s profile image.
  """
  images: [Image!]!

  """
  The user’s Spotify subscription level: “premium”, “free”, etc. (The subscription level “open” can be considered the same as “free”.)
  _This field is only available when the current user has granted access to the[user-read-private](https://developer.spotify.com/documentation/general/guides/authorization-guide/#list-of-scopes) scope._
  """
  product: String!

  """
  The object type: “user”
  """
  type: String!

  """
  The [Spotify URI](https://developer.spotify.com/documentation/web-api/#spotify-uris-and-ids) for the user.
  """
  uri: String!
}

type PublicUser {
  """
  The name displayed on the user’s profile. `null` if not available.
  """
  display_name: String

  """
  Known public external URLs for this user.
  """
  external_urls: [ExternalUrl!]!

  """
  Information about the followers of this user.
  """
  followers: Followers!

  """
  A link to the Web API endpoint for this user.
  """
  href: String!

  """
  The [Spotify user ID](https://developer.spotify.com/documentation/web-api/#spotify-uris-and-ids) for this user.
  """
  id: String!

  """
  The user’s profile image.
  """
  images: [Image!]!

  """
  The object type: “user”
  """
  type: String!

  """
  The [Spotify URI](https://developer.spotify.com/documentation/web-api/#spotify-uris-and-ids) for this user.
  """
  uri: String!

  """
  The playlists owned or followed by this Spotify user.
  """
  playlists(
    """
    The maximum number of playlists to return. Default: 20. Minimum: 1. Maximum: 50.
    """
    limit: Int = 20,

    """
    The index of the first playlist to return. Default: 0 (the first object). Maximum offset: 100.000. Use with `limit` to get the next set of playlists.
    """
    offset: Int = 0,
  ): SimplifiedPlaylistEdge!
}

type AudioAnalysis {
  """
  The time intervals of the bars throughout the track. A bar (or measure) is a segment of time defined as a given number of beats. Bar offsets also indicate downbeats, the first beat of the measure.
  """
  bars: [TimeInterval!]!

  """
  The time intervals of beats throughout the track. A beat is the basic time unit of a piece of music; for example, each tick of a metronome. Beats are typically multiples of tatums.
  """
  beats: [TimeInterval!]!

  """
  Sections are defined by large variations in rhythm or timbre, e.g. chorus, verse, bridge, guitar solo, etc. Each section contains its own descriptions of tempo, key, mode, time_signature, and loudness.
  """
  sections: [Section!]!

  """
  Audio segments attempts to subdivide a song into many segments, with each segment containing a roughly consitent sound throughout its duration.
  """
  segments: [Segment!]!

  """
  A tatum represents the lowest regular pulse train that a listener intuitively infers from the timing of perceived musical events (segments). For more information about tatums, see [Rhythm (below)](https://developer.spotify.com/documentation/web-api/reference/tracks/get-audio-analysis/#rhythm).
  """
  tatums: [TimeInterval!]!
}

type TimeInterval {
  """
  The starting point (in seconds) of the time interval.
  """
  start: Float!

  """
  The duration (in seconds) of the time interval.
  """
  duration: Float!

  """
  The confidence, from 0.0 to 1.0, of the reliability of the interval.
  """
  confidence: Float!
}

type Section {
  """
  The starting point (in seconds) of the section.
  """
  start: Float!

  """
  The duration (in seconds) of the section.
  """
  duration: Float!

  """
  The confidence, from `0.0` to `1.0`, of the reliability of the section’s “designation”.
  """
  confidence: Float!

  """
  The overall loudness of the section in decibels (dB). Loudness values are useful for comparing relative loudness of sections within tracks.
  """
  loudness: Float!

  """
  The overall estimated tempo of the section in beats per minute (BPM). In musical terminology, tempo is the speed or pace of a given piece and derives directly from the average beat duration.
  """
  tempo: Float!

  """
  The confidence, from `0.0` to `1.0`, of the reliability of the _tempo_. Some tracks contain tempo changes or sounds which don’t contain tempo (like pure speech) which would correspond to a low value in this field.
  """
  tempo_confidence: Float!

  """
  The estimated overall key of the section. The values in this field ranging from `0` to `11` mapping to pitches using standard [Pitch Class notation](https://en.wikipedia.org/wiki/Pitch_class) (E.g. 0 = C, 1 = C♯/D♭, 2 = D, and so on). If no key was detected, the value is `-1`.
  """
  key: Int!

  """
  The confidence, from `0.0` to `1.0`, of the reliability of the _key_. Songs with many key changes may correspond to low values in this field.
  """
  key_confidence: Float!

  """
  Indicates the modality (major or minor) of a track, the type of scale from which its melodic content is derived. This field will contain a `0` for “minor”, a `1` for “major”, or a `-1` for no result. _Note that the major key (e.g. C major) could more likely be confused with the minor key at 3 semitones lower (e.g. A minor) as both keys carry the same pitches._
  """
  mode: Int!

  """
  The confidence, from `0.0` to `1.0`, of the reliability of the _mode_.
  """
  mode_confidence: Float!

  """
  An estimated overall time signature of a track. The time signature (meter) is a notational convention to specify how many beats are in each bar (or measure). The time signature ranges from `3` to `7` indicating time signatures of “3/4”, to “7/4”.
  """
  time_signature: Int!

  """
  The confidence, from `0.0` to `1.0`, of the reliability of the _time_signature_. Sections with time signature changes may correspond to low values in this field.
  """
  time_signature_confidence: Float!
}

type Segment {
  """
  The starting point (in seconds) of the segment.
  """
  start: Float!

  """
  The duration (in seconds) of the segment.
  """
  duration: Float!

  """
  The confidence, from `0.0` to `1.0`, of the reliability of the segmentation. Segments of the song which are difficult to logically segment (e.g: noise) may correspond to low values in this field.
  """
  confidence: Float!

  """
  The onset loudness of the segment in decibels (dB). Combined with `loudness_max` and `loudness_max_time`, these components can be used to desctibe the “attack” of the segment.
  """
  loudness_start: Float!

  """
  The peak loudness of the segment in decibels (dB). Combined with `loudness_start` and `loudness_max_time`, these components can be used to desctibe the “attack” of the segment.
  """
  loudness_max: Float!

  """
  The segment-relative offset of the segment peak loudness in seconds. Combined with `loudness_start` and `loudness_max`, these components can be used to desctibe the “attack” of the segment.
  """
  loudness_max_time: Float!

  """
  The offset loudness of the segment in decibels (dB). This value should be equivalent to the `loudness_start` of the following segment.
  """
  loudness_end: Float!

  """
  A “chroma” vector representing the pitch content of the segment, corresponding to the 12 pitch classes C, C#, D to B, with values ranging from 0 to 1 that describe the relative dominance of every pitch in the chromatic scale. [More details about how to interpret this vector can be found below.](https://developer.spotify.com/documentation/web-api/reference/tracks/get-audio-analysis/#pitch).
  """
  pitches: [Float!]!

  """
  _Timbre_ is the quality of a musical note or sound that distinguishes different types of musical instruments, or voices. Timbre vectors are best used in comparison with each other. [More details about how to interpret this vector can be found on the below.](https://developer.spotify.com/documentation/web-api/reference/tracks/get-audio-analysis/#timbre).
  """
  timbre: [Float!]!
}

type PlaylistTracks {
  """
  The Web API endpoint where full details of the playlist’s tracks can be retrieved.
  """
  href: String!

  """
  The total number of tracks in the playlist.
  """
  total: Int!
}

type Restrictions {
  """
  The reason why the track is not available.
  """
  reason: String!
}

type Query {
  """
  Get Spotify catalog information for a single album.
  """
  album(
    """
    The [Spotify ID](https://developer.spotify.com/documentation/web-api/#spotify-uris-and-ids) for the album.
    """
    id: String!,

    """
    An [ISO 3166-1 alpha-2 country code](http://en.wikipedia.org/wiki/ISO_3166-1_alpha-2) or the string `from_token`. Provide this parameter if you want to apply [Track Relinking](https://developer.spotify.com/documentation/general/guides/track-relinking-guide/).
    """
    market: String,
  ): Album!

  """
  Get Spotify catalog information for multiple albums identified by their Spotify IDs.
  """
  albums(
    """
    A comma-separated list of the [Spotify IDs](https://developer.spotify.com/documentation/web-api/#spotify-uris-and-ids) for the albums. Maximum: 20 IDs.
    """
    ids: [String!]!,

    """
    An [ISO 3166-1 alpha-2 country code](http://en.wikipedia.org/wiki/ISO_3166-1_alpha-2) or the string `from_token`. Provide this parameter if you want to apply [Track Relinking](https://developer.spotify.com/documentation/general/guides/track-relinking-guide/).
    """
    market: String,
  ): [Album!]!

  """
  Get Spotify catalog information for a single artist identified by their unique Spotify ID.
  """
  artist(
    """
    The [Spotify ID](https://developer.spotify.com/documentation/web-api/#spotify-uris-and-ids) for the artist.
    """
    id: String!,
  ): Artist!

  """
  Get Spotify catalog information for several artists based on their Spotify IDs.
  """
  artists(
    """
    A comma-separated list of the [Spotify IDs](https://developer.spotify.com/documentation/web-api/#spotify-uris-and-ids) for the artists. Maximum: 50 IDs.
    """
    ids: [String!]!,
  ): [Artist!]!

  """
  Get a list of categories used to tag items in Spotify (on, for example, the Spotify player’s “Browse” tab).
  """
  categories(
    """
    A country: an [ISO 3166-1 alpha-2 country code](http://en.wikipedia.org/wiki/ISO_3166-1_alpha-2). Provide this parameter if you want to narrow the list of returned categories to those relevant to a particular country. If omitted, the returned items will be globally relevant.
    """
    country: String,

    """
    The desired language, consisting of an [ISO 639-1](http://en.wikipedia.org/wiki/ISO_639-1)language code and an [ISO 3166-1 alpha-2 country code](http://en.wikipedia.org/wiki/ISO_3166-1_alpha-2), joined by an underscore. For example: `es_MX`, meaning "Spanish (Mexico)". Provide this parameter if you want the category metadata returned in a particular language. Note that, if `locale` is not supplied, or if the specified language is not available, all strings will be returned in the Spotify default language (American English). The `locale`parameter, combined with the `country` parameter, may give odd results if not carefully matched. For example `country=SE&locale=de_DE` will return a list of categories relevant to Sweden but as German language strings.
    """
    locale: String,

    """
    The maximum number of categories to return. Default: 20. Minimum: 1. Maximum: 50.
    """
    limit: Int = 20,

    """
    The index of the first item to return. Default: 0 (the first object). Use with `limit` to get the next set of categories.
    """
    offset: Int = 0,
  ): CategoryEdge!

  """
  Get a single category used to tag items in Spotify (on, for example, the Spotify player’s “Browse” tab).
  """
  category(
    """
    The [Spotify category ID](https://developer.spotify.com/documentation/web-api/#spotify-uris-and-ids) for the category.
    """
    id: String!,

    """
    A country: an [ISO 3166-1 alpha-2 country code](http://en.wikipedia.org/wiki/ISO_3166-1_alpha-2). Provide this parameter to ensure that the category exists for a particular country.
    """
    country: String,

    """
    The desired language, consisting of an [ISO 639-1](http://en.wikipedia.org/wiki/ISO_639-1)language code and an [ISO 3166-1 alpha-2 country code](http://en.wikipedia.org/wiki/ISO_3166-1_alpha-2), joined by an underscore. For example: `es_MX`, meaning "Spanish (Mexico)". Provide this parameter if you want the category strings returned in a particular language. Note that, if `locale` is not supplied, or if the specified language is not available, the category strings returned will be in the Spotify default language (American English).
    """
    locale: String,
  ): Category!

  """
  Get a playlist owned by a Spotify user.
  """
  playlist(
    """
    The [Spotify ID](https://developer.spotify.com/documentation/web-api/#spotify-uris-and-ids) for the playlist.
    """
    id: String!,

    # TODO(bobbyluig): Use fields optimization.

    """
    An [ISO 3166-1 alpha-2 country code](http://en.wikipedia.org/wiki/ISO_3166-1_alpha-2) or the string `from_token`. Provide this parameter if you want to apply [Track Relinking](https://developer.spotify.com/documentation/general/guides/track-relinking-guide/).
    """
    market: String,
  ): Playlist!

  """
  Get Spotify Catalog information about artists, albums, tracks or playlists that match a keyword string.
  """
  search(
    """
    Search [query](https://developer.spotify.com/documentation/web-api/reference/search/search/#writing-a-query---guidelines) keywords and optional field filters and operators. For example: `q=roadhouse%20blues`.
    """
    q: String!,

    """
    A comma-separated list of item types to search across. Valid types are: `album` , `artist`, `playlist`, and `track`. Search results include hits from all the specified item types. For example: `q=name:abacab&type=album,track`returns both albums *and* tracks with "abacab" included in their name.
    """
    type: [String!]!,

    """
    An [ISO 3166-1 alpha-2 country code](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2) or the string `from_token`. If a country code is specified, only artists, albums, and tracks with content that is playable in that market is returned.
    """
    market: String,

    """
    Maximum number of results to return. Default: 20. Minimum: 1. Maximum: 50. Note: The limit is applied within each type, not on the total response. For example, if the limit value is 3 and the type is `artist,album`, the response contains 3 artists and 3 albums.
    """
    limit: Int = 20,

    """
    The index of the first result to return. Default: 0 (the first result). Maximum offset (including limit): 10,000. Use with limit to get the next page of search results.
    """
    offset: Int = 0,

    """
    Possible values: `audio`. If `include_external=audio` is specified the response will include any relevant audio content that is hosted externally. By default external content is filtered out from responses.
    """
    include_external: String,
  ): SearchResult!

  """
  Get Spotify catalog information for multiple tracks based on their Spotify IDs.
  """
  tracks(
    """
    A comma-separated list of the [Spotify IDs](https://developer.spotify.com/documentation/web-api/#spotify-uris-and-ids) for the albums. Maximum: 50 IDs.
    """
    ids: [String!]!,

    """
    An [ISO 3166-1 alpha-2 country code](http://en.wikipedia.org/wiki/ISO_3166-1_alpha-2) or the string `from_token`. Provide this parameter if you want to apply [Track Relinking](https://developer.spotify.com/documentation/general/guides/track-relinking-guide/).
    """
    market: String,
  ): [Track!]!

  """
  Get Spotify catalog information for a single track identified by its unique Spotify ID.
  """
  track(
    """
    The [Spotify ID](https://developer.spotify.com/documentation/web-api/#spotify-uris-and-ids) for the track.
    """
    id: String!,

    """
    An [ISO 3166-1 alpha-2 country code](http://en.wikipedia.org/wiki/ISO_3166-1_alpha-2) or the string `from_token`. Provide this parameter if you want to apply [Track Relinking](https://developer.spotify.com/documentation/general/guides/track-relinking-guide/).
    """
    market: String,
  ): Track!

  """
  Get public profile information about a Spotify user.
  """
  user(
    """
    The user's [Spotify user ID](https://developer.spotify.com/documentation/web-api/#spotify-uris-and-ids).
    """
    id: String!,
  ): PublicUser!

  """
  Get a list of Spotify featured playlists (shown, for example, on a Spotify player’s ‘Browse’ tab).
  """
  featured_playlists(
    """
    The desired language, consisting of a lowercase ISO 639-1 language code and an uppercase ISO 3166-1 alpha-2 country code, joined by an underscore. For example: es_MX, meaning “Spanish (Mexico)”. Provide this parameter if you want the results returned in a particular language (where available). Note that, if locale is not supplied, or if the specified language is not available, all strings will be returned in the Spotify default language (American English). The locale parameter, combined with the country parameter, may give odd results if not carefully matched. For example country=SE&locale=de_DE will return a list of categories relevant to Sweden but as German language strings.
    """
    locale: String,

    """
    A country: an [ISO 3166-1 alpha-2 country code](http://en.wikipedia.org/wiki/ISO_3166-1_alpha-2). Provide this parameter if you want the list of returned items to be relevant to a particular country. If omitted, the returned items will be relevant to all countries.
    """
    country: String,

    """
    A timestamp in [ISO 8601 format](http://en.wikipedia.org/wiki/ISO_8601): `yyyy-MM-ddTHH:mm:ss`. Use this parameter to specify the user's local time to get results tailored for that specific date and time in the day. If not provided, the response defaults to the current UTC time. Example: "2014-10-23T09:00:00" for a user whose local time is 9AM. If there were no featured playlists (or there is no data) at the specified time, the response will revert to the current UTC time.
    """
    timestamp: String,

    """
    The maximum number of items to return. Default: 20. Minimum: 1. Maximum: 50.
    """
    limit: Int = 20,

    """
    The index of the first item to return. Default: 0 (the first object). Use with `limit` to get the next set of items.
    """
    offset: Int = 0,
  ): SimplifiedPlaylistEdge!

  """
  Get a list of new album releases featured in Spotify (shown, for example, on a Spotify player’s “Browse” tab).
  """
  new_releases(
    """
    A country: an [ISO 3166-1 alpha-2 country code](http://en.wikipedia.org/wiki/ISO_3166-1_alpha-2). Provide this parameter if you want the list of returned items to be relevant to a particular country. If omitted, the returned items will be relevant to all countries.
    """
    country: String,

    """
    The maximum number of items to return. Default: 20. Minimum: 1. Maximum: 50.
    """
    limit: Int = 20,

    """
    The index of the first item to return. Default: 0 (the first object). Use with `limit` to get the next set of items.
    """
    offset: Int = 0,
  ): SimplifiedAlbumEdge!
}

type SearchResult {
  """
  The albums associated with the search.
  """
  albums: SimplifiedAlbumEdge,

  """
  The artists assosciated with the search.
  """
  artists: ArtistEdge,

  """
  The playlists associated with the search.
  """
  playlists: SimplifiedPlaylistEdge,

  """
  The tracks associated with the search.
  """
  tracks: TrackEdge,
}

type TrackEdge {
  """
  The requested data.
  """
  items: [Track!]!

  """
  The paging object associated with the edge.
  """
  paging: Paging!
}

type PlaylistTrackEdge {
  """
  The requested data.
  """
  items: [PlaylistTrack!]!

  """
  The paging object associated with the edge.
  """
  paging: Paging!
}


type SimplifiedTrackEdge {
  """
  The requested data.
  """
  items: [SimplifiedTrack!]!

  """
  The paging object associated with the edge.
  """
  paging: Paging!
}

type SimplifiedAlbumEdge {
  """
  The requested data.
  """
  items: [SimplifiedAlbum!]!

  """
  The paging object associated with the edge.
  """
  paging: Paging!
}

type SimplifiedPlaylistEdge {
  """
  The requested data.
  """
  items: [SimplifiedPlaylist!]!

  """
  The paging object associated with the edge.
  """
  paging: Paging!
}

type ArtistEdge {
  """
  The requested data.
  """
  items: [Artist!]!

  """
  The paging object associated with the edge.
  """
  paging: Paging!
}

type CategoryEdge {
  """
  The requested data.
  """
  items: [Category!]!

  """
  The paging object associated with the edge.
  """
  paging: Paging!
}

